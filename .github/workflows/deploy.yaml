name: Deploy workflow

on:
    workflow_dispatch:
        inputs:
            apiName:
              description: 'Select API'
              required: true
              default: 'oas-httpbin'
              type: choice
              options:
              - oas-httpbin
            tag:
              description: 'Version Tag'
              required: true
              type: string
            env:
                description: 'Deploy Environment'
                required: true
                default: 'production'
                type: choice
                options:
                - staging
                - production
    repository_dispatch:
        types: [trigger]

jobs:
    deploy-oas-httpbin:
        runs-on: ubuntu-latest
        if: ${{ inputs.apiName }} == 'oas-httpbin'
        environment: ${{ inputs.env }}
        permissions:
          contents: write
        steps:
        - 
            name: Checkout repository
            uses: actions/checkout@v2
        - 
            name: Setup Host Environment
            id: dashboard
            env:
                dashboardUrl: ${{ vars.TYK_DASHBOARD_URL }}
                dashboardHost: ${{ secrets.TYK_DASHBOARD_HOST }}
            run: |
                if [ -n "$dashboardHost" ]; then
                    sudo echo "$dashboardHost" | sudo tee -a /etc/hosts 
                fi
                echo "dashboardUrl=$dashboardUrl" >> $GITHUB_OUTPUT
        - 
            name: Print Debug
            run: |
                echo ${{ vars.TYK_DASHBOARD_URL }}
                echo ${{ secrets.TYK_DASHBOARD_HOST }}
                echo '${{ vars.TYK_DASHBOARD_URL }}/api/apis/oas/import?validateRequest=true&templateID=${{ secrets.API_TEMPLATE_ID }}'
        -
            name: Setup ORAS
            uses: oras-project/setup-oras@v1
        - 
            name: Check if file exists
            id: check-file
            run: |
                if [ -f "./${{ inputs.apiName }}/apidefinitions/${{ inputs.apiName }}.json" ]; then
                    echo "fileExists=true" >> $GITHUB_OUTPUT
                else
                    echo "fileExists=false" >> $GITHUB_OUTPUT
                fi
        -
            name: Read file and extract ID
            if: steps.check-file.outputs.fileExists == 'true'
            id: read-file
            run: |
                json=$(<./${{ inputs.apiName }}/apidefinitions/${{ inputs.apiName }}.json)
                id=$(jq -r '."x-tyk-api-gateway".info.id' <<< "$json")
                echo "id=$id" >> $GITHUB_OUTPUT
        -
            name: Patch or Import API
            env:
                id: ${{ steps.read-file.outputs.id }}
                dashboardUrl: ${{ steps.dashboard.outputs.dashboardUrl }}
            run: |
                oras pull registry-1.docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.apiName }}:openapi_schema-${{ inputs.tag }}
                body=$(<openapi_schema.json)

                if [ "${{ steps.check-file.outputs.fileExists }}" == 'true' ]; then
                    # If the file exists, Patch API
                    echo "# Patched API $id ..."
                    request="${{ vars.TYK_DASHBOARD_URL }}/api/apis/oas/${id}?validateRequest=true&templateID=${{ secrets.API_TEMPLATE_ID }}"
                    echo $request
                    wget --method=PATCH $request --header='Authorization: ${{ secrets.TYK_APIKEY }}' --header='Content-Type: text/plain' --body-data="$body" -O res.json
                    api_id=$id
                else
                    # If the file does not exist, Import API
                    echo "# Import API  ..."
                    wget --method=POST '${{ steps.dashboard.outputs.dashboardUrl }}/api/apis/oas/import?validateRequest=true&templateID=${{ secrets.API_TEMPLATE_ID }}' --header='Authorization: ${{ secrets.TYK_APIKEY }}' --header='Content-Type: text/plain' --body-data="$body" -O res.json
                    api_id=$(cat res.json | jq -r '.ID')
                fi

                echo "# "
                echo "# Retrieve API Definition $api_id..."
                echo "# "
                wget --method=GET ${{ vars.TYK_DASHBOARD_URL }}/api/apis/oas/$api_id --header 'Authorization: ${{ secrets.TYK_APIKEY }}' --header 'Content-Type: text/plain' -O res.json

                cat res.json | jq '."x-tyk-api-gateway".server.listenPath.value="<<AUTO REPLACE LISTENPATH>>"' | jq '."x-tyk-api-gateway".upstream.url="<<AUTO REPLACE TARGETURL>>"' > ${{ inputs.apiName }}.json

                # echo "# "
                # echo "# Remove Temporary API $api_id ..."
                # echo "# "
                # wget --method=DELETE ${{ vars.TYK_DASHBOARD_URL }}/api/apis/oas/$api_id --header 'Authorization: ${{ secrets.TYK_APIKEY }}' -O res.json

                rm res.json

                mv ${{ inputs.apiName }}.json ./${{ inputs.apiName }}/apidefinitions/${{ inputs.apiName }}.json

                echo "# "
                echo "# Generated API Definition ... ./${{ inputs.apiName }}/apidefinitions/${{ inputs.apiName }}.json "
                echo "# "
                cat ./${{ inputs.apiName }}/apidefinitions/${{ inputs.apiName }}.json
        - 
            name: Update values.yaml
            run: |
                new_tag="${{ inputs.tag }}"  # Set your new tag value here
                sed "s/\(tag: \).*/\1$new_tag/" ./${{ inputs.apiName }}/values.yaml > ./tmp.yaml
                cp ./tmp.yaml ./${{ inputs.apiName }}/values.yaml
                rm ./tmp.yaml
        -
            name: Commit API Definition file and values.yaml
            run: |
                git config --global user.name 'github action'
                git config --global user.email 'github_action@tyk.com'
                git add ./${{ inputs.apiName }}/apidefinitions/${{ inputs.apiName }}.json
                git add ./${{ inputs.apiName }}/values.yaml
                git commit -m "Update API Definition by release action"
                git push
